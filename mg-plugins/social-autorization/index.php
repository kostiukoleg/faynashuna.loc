<?php
/*
 * Plugin Name: Авторизация через социальные сети
 * Description: Выводит блок для авторизации на сайте через социальные сети. Для вывода блока укажите шорт код [sociallogin] или [sociallogin partly = 5], где 5 - это количество ярлыков, вне блока
 * Author: Шамарин Александр
 * Version: 2.0.0
 */
 new SocialAutorization; class SocialAutorization { private static $ver = '2.0.0'; private static $lang = array(); private static $pluginName = ''; private static $path = ''; public function __construct() { mgAddAction(__FILE__, array(__CLASS__, 'pageSettingsPlugin')); mgAddShortcode('sociallogin', array(__CLASS__, 'sociallogin')); mgActivateThisPlugin(__FILE__, array(__CLASS__, 'activate')); mgDeactivateThisPlugin(__FILE__, array(__CLASS__, 'deactivate')); self::$pluginName = PM::getFolderPlugin(__FILE__); self::$lang = PM::plugLocales(self::$pluginName); include('mg-admin/locales/'.MG::getSetting('languageLocale').'.php'); $lang = array_merge($lang,self::$lang); self::$lang = $lang; self::$path = PLUGIN_DIR.self::$pluginName; if(URL::isSection('mg-admin')) { self::UpdateService(); } else { mgAddMeta('<link rel="stylesheet" href="'.SITE.'/'.self::$path.'/css/form.css" type="text/css" />'); mgAddMeta('<script type="text/javascript" src="'.SITE.'/mg-core/script/jquery-ui-1.10.3.custom.min.js"></script>'); mgAddMeta('<script type="text/javascript" src="'.SITE.'/'.self::$path.'/js/auth.js"></script>'); } } public static function isMobileDevice() { $user_agent = $_SERVER['HTTP_USER_AGENT']; $device['ipod'] = strpos($user_agent, "iPod"); $device['iphone'] = strpos($user_agent, "iPhone"); $device['android'] = strpos($user_agent, "Android"); $device['symb'] = strpos($user_agent, "Symbian"); $device['winphone'] = strpos($user_agent, "WindowsPhone"); $device['wp7'] = strpos($user_agent, "WP7"); $device['wp8'] = strpos($user_agent, "WP8"); $device['operam'] = strpos($user_agent, "Opera M"); $device['palm'] = strpos($user_agent, "webOS"); $device['berry'] = strpos($user_agent, "BlackBerry"); $device['mobile'] = strpos($user_agent, "Mobile"); $device['htc'] = strpos($user_agent, "HTC_"); $device['fennec'] = strpos($user_agent, "Fennec/"); foreach ($device as $key => $isMobile) { if($isMobile){ return $key; } } return false; } public static function deactivate() { $realDocumentRoot = str_replace(DIRECTORY_SEPARATOR.'mg-plugins'.DIRECTORY_SEPARATOR.self::$pluginName, '', dirname(__FILE__)); if (file_exists($realDocumentRoot.'/mg-core/controllers/sociallogin.php')) unlink($realDocumentRoot.'/mg-core/controllers/sociallogin.php'); if (file_exists($realDocumentRoot.'/mg-core/views/sociallogin.php')) unlink($realDocumentRoot.'/mg-core/views/sociallogin.php'); } public static function activate() { $realDocumentRoot = str_replace(DIRECTORY_SEPARATOR.'mg-plugins'.DIRECTORY_SEPARATOR.self::$pluginName, '', dirname(__FILE__)); if (!file_exists($realDocumentRoot.'/mg-core/controllers/sociallogin.php')) { copy(dirname(__FILE__).'/additions/sociallogin.controller.php', $realDocumentRoot.'/mg-core/controllers/sociallogin.php'); } if (!file_exists($realDocumentRoot.'/mg-core/views/sociallogin.php')) { copy(dirname(__FILE__).'/additions/sociallogin.view.php', $realDocumentRoot.'/mg-core/views/sociallogin.php'); } self::createPluginDateBase(); self::createUsersDataBase(); } public static function getArrUsers() { $use = array(); $soc = array(); $i = 0; $db = DB::query('SELECT * FROM `'.PREFIX.self::$pluginName.'_users`'); while($row = DB::fetchAssoc($db)) { $soc += array($i => $row); $i++; } $i = 0; $db = DB::query('SELECT * FROM `'.PREFIX.'user`'); while($row = DB::fetchAssoc($db)) { $use += array($i => $row); $i++; } return array('social' => $soc, 'site' => $use); } public static function getDbSocials() { return DB::query('SELECT * FROM `'.PREFIX.self::$pluginName.'`'); } public static function getArrSocials() { $db_data = self::getDbSocials(); $result[] = array(); while($row = DB::fetchAssoc($db_data)) { $result += array ( $row['abbreviation'] => array ( 'abbreviation' => $row['abbreviation'], 'setting' => explode('|', $row['setting']), 'version' => $row['version'], 'active' => $row['active'], 'handler' => false ) ); } return $result; } public static function updateSocials() { $socarray = self::getArrSocials(); $dir = dirname(__FILE__).'/services/'; if ($handle = opendir($dir)) { while (false !== ($file = readdir($handle))) { if ($file != "." && $file != "..") { $__file = $dir.$file; require_once($__file); $info = array(); $sv_name = substr($file, 0, -4); call_user_func_array(array($sv_name, 'information'), array(&$info)); $add = true; for($i = 0, $c1 = count($socarray); $i <= $c1; $i++) { if(isset($socarray[$info['abbreviation']])) { $socarray[$info['abbreviation']]['handler'] = true; $socarray[$info['abbreviation']] += array( 'name' => $info['name'], 'title' => $info['title'], 'instruction' => $info['instruction'], 'author' => $info['author'] ); $old = (int) preg_replace("/\D/","", $socarray[$info['abbreviation']]['version']); $new = (int) preg_replace("/\D/","", $info['version']); if($new > $old) { $t_value = ""; for($r = 0, $c2 = count($info['setting']); $r <= $c2; $r++) { $t_value .= $info['setting'][$r]['value']."|"; } DB::query("UPDATE `".PREFIX.self::$pluginName."` SET `setting` = '".$t_value."', `version` = ".DB::quote($info['version']).", `active` = ".$info['active']." WHERE `abbreviation` = ".DB::quote($info['abbreviation'])); $socarray[$info['abbreviation']]['version'] = $info['version']; $socarray[$info['abbreviation']]['setting'] = $info['setting']; } else { $a_value = $socarray[$info['abbreviation']]['setting']; $socarray[$info['abbreviation']]['setting'] = $info['setting']; for($r = 0, $c3 = count($info['setting']); $r <= $c3; $r++) { $socarray[$info['abbreviation']]['setting'][$r]['value'] = $a_value[$r]; } } $add = false; break; } } if(empty($info['abbreviation'])) $add = false; if($add) { $socarray += array ( $info['abbreviation'] => array ( 'name' => $info['name'], 'title' => $info['title'], 'abbreviation' => $info['abbreviation'], 'instruction' => $info['instruction'], 'author' => $info['author'], 'version' => $info['version'], 'active' => $info['active'], 'setting' => $info['setting'], 'handler' => true ) ); $t_value = ""; for($r = 0, $c4 = count($info['setting']); $r <= $c4; $r++) { $t_value .= $info['setting'][$r]['value']."|"; } DB::query("
              INSERT INTO `".PREFIX.self::$pluginName."` 
               (`abbreviation`, `setting`, `version`, `active`)
              VALUES
               ('".$info['abbreviation']."', '".$t_value."', '".$info['version']."', ".$info['active'].");" ); } } } closedir($handle); } return $socarray; } public static function createPluginDateBase() { DB::query("
     CREATE TABLE IF NOT EXISTS `".PREFIX.self::$pluginName."` (
	   `abbreviation` text NOT NULL COMMENT 'Аббревиатура',
     `setting` text NOT NULL COMMENT 'Настройки',
     `version` text NOT NULL COMMENT 'Версия',
	   `active` int(10) NOT NULL COMMENT 'Статус активности'
    ) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;"); } public static function createUsersDataBase() { DB::query("
     CREATE TABLE IF NOT EXISTS `".PREFIX.self::$pluginName."_users` (
     `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер',
     `user_id` int(11) NOT NULL COMMENT 'Номер пользователя сайта',     
	   `service`  text NOT NULL COMMENT 'Сервис авторизации',
     `uid` text NOT NULL COMMENT 'Уникальный индекс',
     `full_name` text NOT NULL COMMENT 'Полное имя',
     `first_name` text NOT NULL COMMENT 'Имя',
     `last_name` text NOT NULL COMMENT 'Фамилия',
     `address` text NOT NULL COMMENT 'Адрес',
     `sex` text NOT NULL COMMENT 'Пол',
     `birthday` text NOT NULL COMMENT 'День рождения',
     `gen_email` text NOT NULL COMMENT 'Сгенерированная Почта',
     `email` text NOT NULL COMMENT 'Почта',
     `combined` int(11) NOT NULL COMMENT 'Режим совместимости',
     `blocked` text NOT NULL COMMENT 'Заблокирован',
     PRIMARY KEY (`id`)
    ) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;"); } public static function sociallogin($args = array()) { $partly = !$args['partly'] ? 0 : (int) $args['partly']; unset($args); $sociallogin = ''; if (!User::isAuth()) { $socials = self::updateSocials(); $partly = $partly <= 0 ? count($socials) : $partly; $partyleActive = false; $index = 1; foreach($socials as $social) { if($social['active'] == 0 || !$social['handler']) continue; $n = $social['abbreviation']; $t = $social['title']; if(!$partyleActive && $index > $partly) { $sociallogin .= '<a id="partly" href="javascript: void(0);"></a><div id="partly">'; $partyleActive = true; } $sociallogin .= '<a id = "auth" href="javascript: void(0);" data-name="'.$n.'" class="'.$n.'" title="'.$t.'"></a>'; $index++; } $sociallogin .= $partyleActive ? '</div>' : ''; $socialloginHeader .= '<!-- Вход через соц сети -->
                            <div class="soc-login-block">'; $socialloginFooter .= '</div>'; $sociallogin = $socialloginHeader.$sociallogin.$socialloginFooter; Storage::save(md5('sociallogin'.URL::getUrl()), $sociallogin); } return $sociallogin; } public static function pageSettingsPlugin() { $ver = self::$ver; $path = self::$path; $lang = self::$lang; $pluginName = self::$pluginName; $socials = self::updateSocials(); $users = self::getArrUsers(); self::preparePageSettings(); include('PagePlugin.php'); } public static function preparePageSettings() { echo '
          <link rel="stylesheet" href="'.SITE.'/'.self::$path.'/css/form.css" type="text/css" />
          <link rel="stylesheet" href="'.SITE.'/'.self::$path.'/css/style.css" type="text/css" />
          <script type="text/javascript">
            includeJS("'.SITE.'/'.self::$path.'/js/script.js");
          </script>
    '; } public static function UpdateService() { $timeLastUpdata = MG::getSetting('timeLastPluginUpdata'); if (time() < $timeLastUpdata + 60 * 10) { return (int) MG::getSetting('updateNewsCount'); } MG::setOption(array( 'option' => 'timeLastPluginUpdata', 'value' => time(), )); $updateService = 'http://moguta.elitesoft.su'; $version = self::$ver; $key = MG::getOption('SocialLoginKey'); $promo = ''; $operator = 'news'; $params = array ( 'sDomain' => $_SERVER['SERVER_NAME'], 'sIp' => $_SERVER['SERVER_ADDR'] == "::1" ? '127.0.0.1' : $_SERVER['SERVER_ADDR'], 'sEv' => VER, 'sVer' => $version, 'sKey' => $key, 'sPromo' => $promo, 'sPlugin' => self::$pluginName, 'sTime' => time(), 'sLastT' => $timeLastUpdata, 'sOper' => $operator ); $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $updateService); curl_setopt($curl, CURLOPT_POST, 1); curl_setopt($curl, CURLOPT_TIMEOUT, 10); curl_setopt($curl, CURLOPT_POSTFIELDS, urldecode(http_build_query($params))); curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); $result = curl_exec($curl); curl_close($curl); $res = json_decode($result, true); $newsList = $res['news']['list']; $newsListStr = ''; if(is_array($newsList)) { for($New = count($newsList); $New >= 0; $New--) { if(empty($newsList[$New])) continue; $newsListStr .= '<div class="new_"><div class="head">'.$newsList[$New]['head'].'</div><div class="body">'.$newsList[$New]['body'].'</div></div>'; } } MG::setOption(array( 'option' => 'updateNews', 'value' => $newsListStr, )); MG::setOption(array( 'option' => 'updateNewsCount', 'value' => $res['news']['count'], )); return $res['news']['count']; } }