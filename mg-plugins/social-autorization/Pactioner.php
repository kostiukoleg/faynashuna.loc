<?php
 class Pactioner extends Actioner { private static $pluginName = 'social-autorization'; public function getSocialUserByID($id) { return DB::query('SELECT * FROM `'.PREFIX.self::$pluginName.'_users` WHERE `id` = '.$id); } public function getDbSocial($service) { return DB::query('SELECT * FROM `'.PREFIX.self::$pluginName.'` WHERE `abbreviation` = '.DB::quote($service)); } public function getDbSocials() { return DB::query('SELECT * FROM `'.PREFIX.self::$pluginName.'`'); } public function handlerController() { $this->messageSucces = 'Обновлено успешно'; $this->messageError = 'Возникла ошибка'; $result = false; $operator = $_POST['operator']; $abbr = $_POST['abbr']; $value = $_POST['value']; switch ($operator) { case 'activate': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'` SET `active` = 1 WHERE `abbreviation` = '.DB::quote($abbr)); break; case 'deactivate': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'` SET `active` = 0 WHERE `abbreviation` = '.DB::quote($abbr)); break; case 'updateSetting': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'` SET `setting` = '.DB::quote($value).' WHERE `abbreviation` = '.DB::quote($abbr)); break; default: break; } return $result; } public function userController() { $this->messageSucces = 'Обновлено успешно'; $this->messageError = 'Возникла ошибка'; $additions = $_POST['additions']; $operator = $_POST['operator']; $id = (int) $_POST['id']; $result = false; switch ($operator) { case 'delete': $result = true; break; case 'activate': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'_users` SET `blocked` = "0" WHERE `id` = '.$id); break; case 'blocked': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'_users` SET `blocked` = '.DB::quote($additions).' WHERE `id` = '.$id); break; case 'combine': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'_users` SET `combined` = 1 WHERE `id` = '.$id); break; case 'decombine': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'_users` SET `combined` = 0 WHERE `id` = '.$id); break; case 'updateEmail': $result = DB::query('UPDATE `'.PREFIX.self::$pluginName.'_users` SET `email` = '.DB::quote($additions).' WHERE `id` = '.$id); break; default: break; } return $result; } public function modifier($file) { if (!file_exists($file)) { return false; } require_once $file; if (is_array($sqlQuery)) { foreach ($sqlQuery as $sql) { DB::query($sql); } } if (is_array($updateArray)) { foreach ($updateArray as $updatefile) { if (file_exists($updatefile['old'])) { unlink($updatefile['old']); copy($updatefile['new'] , $updatefile['old']); } } } if (is_array($deleteArray)) { foreach ($deleteArray as $deletedfile) { if (file_exists($deletedfile)) { unlink($deletedfile); } } } unlink($file); return true; } public function istall($local_file) { if (file_exists($local_file)) { $zip = new ZipArchive; $res = $zip->open($local_file, ZIPARCHIVE::CREATE); if ($res === TRUE) { $zip->extractTo(dirname(__FILE__)); $zip->close(); return unlink($local_file); } } return false; } public function download($url, $local_file) { if (!file_exists($local_file)) { $curl = curl_init($url); $file = fopen($local_file, "w"); curl_setopt($curl, CURLOPT_FILE, $file); curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); curl_setopt($curl, CURLOPT_HEADER, 0); curl_exec($curl); curl_close($curl); fclose($file); return true; } return false; } public function updateController() { $this->messageSucces = 'Данные получены'; $this->messageError = 'Повторите запрос через пару минут'; $updateService = 'http://moguta.elitesoft.su'; $version = $_POST['version']; $key = $_POST['key']; $promo = $_POST['promo']; $operator = $_POST['operator']; $params = array ( 'sDomain' => $_SERVER['SERVER_NAME'], 'sIp' => $_SERVER['SERVER_ADDR'] == "::1" ? '127.0.0.1' : $_SERVER['SERVER_ADDR'], 'sEv' => VER, 'sVer' => $version, 'sKey' => $key, 'sPromo' => $promo, 'sPlugin' => self::$pluginName, 'sTime' => time(), 'sOper' => $operator ); $timeLastUpdata = MG::getSetting('timeLastSocAuthActivate'); if (time() < $timeLastUpdata + 60) { return false; } MG::setOption(array( 'option' => 'timeLastSocAuthActivate', 'value' => time(), )); $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $updateService); curl_setopt($curl, CURLOPT_POST, 1); curl_setopt($curl, CURLOPT_TIMEOUT, 10); curl_setopt($curl, CURLOPT_POSTFIELDS, urldecode(http_build_query($params))); curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); $result = curl_exec($curl); curl_close($curl); $res = json_decode($result, true); if(empty($res['status'])) { $this->messageError = 'Не удалось установить соединение'; return false; } $this->messageError = $res['description']; if($res['update']['new'] == $_POST['version']) { $this->messageSucces = 'У вас последняя версия'; return true; } else if (isset($res['update']['link'])) { $this->messageSucces = 'Новая версия '.$res['update']['new'].' установлена'; $this->messageError = 'Не удалось установить новую версию'; $l_f = dirname(__FILE__).'/new_ver.zip'; $m_f = dirname(__FILE__).'/modifier.php'; if (self::download($res['update']['link'], $l_f)) { if (self::istall($l_f)) { self::modifier($m_f); return true; } } return false; } else if ($res['update']['status'] == "error") { $this->messageError = $res['update']['description']; return false; } if(isset($res['promo']['link'])) { $this->messageSucces = 'Промо-пакет установлен'; $this->messageError = 'Не удалось установить промо-пакет'; $l_f = dirname(__FILE__).'/promo.zip'; $m_f = dirname(__FILE__).'/modifier.php'; if (self::download($res['promo']['link'], $l_f)) { if (self::istall($l_f)) { self::modifier($m_f); return true; } } return false; } else if($res['promo']['status'] == 'error') { $this->messageError = $res['promo']['description']; return false; } return $res['status'] == "success" ? true : false; } public function mailController() { $this->messageSucces = 'Сообщение отправлено'; $this->messageError = 'Ошибка'; $massageService = 'http://moguta.elitesoft.su'; $params = array ( 'message' => $_POST['message'] ); $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $massageService); curl_setopt($curl, CURLOPT_POST, 1); curl_setopt($curl, CURLOPT_TIMEOUT, 10); curl_setopt($curl, CURLOPT_POSTFIELDS, urldecode(http_build_query($params))); curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); $result = curl_exec($curl); curl_close($curl); $res = json_decode($result, true); if(empty($res['status'])) return false; if($res['status'] == 'error') return false; return true; } public function mainController() { $this->messageSucces = 'Настройки сохранены'; $this->messageError = 'Ошибка'; if(!empty($_POST['param'])) { MG::setOption(array( 'option' => $_POST['param'], 'value' => $_POST['value'], )); return true; } return false; } }